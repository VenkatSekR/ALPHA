UNLIKE IT IS DEFINED AND MAINTAINED EXPLICITLY BY USER.

1. DECLARE A VARIABLE OF EXCEPTION DATATYPE.

2. RAISE THE EXCEPTION.

3. HANDLE THE EXCEPTION.

METHODS:

1. USING VARIABLE OF EXCEPTIONS TYPE.
   BY DECLARING EXCEPTION VARIABLE.


SET SERVEROUTPUT ON;
/
DECLARE 
V1 NUMBER :=18;
V2 NUMBER :=10;
V_RESULT NUMBER;
EXCEP_TION EXCEPTION;
BEGIN
IF V_RESULT = 0 THEN
RAISE EXCEP_TION;
END IF ;
V_RESULT := V1/V2;
DBMS_OUTPUT.PUT_LINE('RESULT-->'||V_RESULT);
EXCEPTION WHEN EXCEP_TION THEN 
DBMS_OUTPUT.PUT_LINE(SQLERRM||' '||SQLCODE);
END;

EXEC P1


2. USING PRAGMA EXCEPTION_INIT FUNCTION.
  (WE CAN MAP A NON_PREDEFINED ERROR NUMBER WITH VARIABLE OF EXCEPTION DATATYPE).
  (Pragma Exception_Init is a two part statement where first part is made up of 
   keyword PRAGMA and second part is the Exception_Init call).
   USING THIS WE ASSOCIATE AN EXCEPTION NAME WITH AN ORACLE ERROR.
  




3.USING RAISE_APPLICATION_ERROR.
  (WITH OUR OWN ERROR CODE AND MESSAGE).
  (WE CAN ASSIGN A CUSTOM MESSAGE FOR ERROR NUMBER DEFINED BY ORACLE).



ACCEPT UR_AGE  NUMBER PROMPT 'WHAT IS YOUR AGE';
DECLARE 
AGE NUMBER := &UR_AGE;
BEGIN
IF AGE<18 THEN
RAISE_APPLICATION_ERROR(-20000,'U DONT HAVE A LEGAL AGE TO DRINK');
ELSE
DBMS_OUTPUT.PUT_LINE('WHAT WOULD U LIKE TO DRINK');
END IF;
EXCEPTION WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;